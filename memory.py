#!/usr/bin/python3

'''
DOCSTRING: This program runs a basic memory card game. If memory() is
    called for the menu it will take arguments, but if the program
    is runa s main the user will still be prompted for input.
    This docstring sucks, write better.
    Input:
        user: User, who is playing the game.
        deck: a {dictionary} of terms and definitions
        tlimit: integer - the time limit in seconds for the game
    Output:
        cards_played - a [list] of strings representing the card names
            from te most recent round
        user - an update User instance
'''

import random
import time
import os
from pprint import pprint
import shelve
import menu as mu
import dicts

ANS_LIST = ['order 66', 'address', 'go']


def memory(user):
    '''
    DOCSTRING: This function is the main gameplay of the memory card
    game. It takes in a user, updates their stats each round, and
    a list of cards answered
    Input:
        User: user
    Output:
        List: game_cards
    '''
    # past is a list of all cards played in session
    past = []
    correct = 0
    tlimit = mu.how_long()
    timer = time.time()

    # rewrite to allow multiple decks
    # while len(past) < len(EOSDICT):
    while len(past) < len(ANS_LIST):  # remove after debugging
        past = one_round(past, correct, user)
        if time.time() - tlimit > timer:
            print("Time's up.")
            break
    return past


def one_round(answered, correct, user):
    '''
    DOCSTRING: This function draws a card from the game deck, selects filler
    answers for multiple choice, queries the user, verifies the answer, updates
    the user stats, and returns an updated deck. If user is correct card is
    removed from the draw deck, if incorrect card may appear again in round.
    input:
        answered: a list of terms already correctly answered in game
        correct: an integer representing total correct in game
        user: the profile to receive stats update
    output:
        answered: a list of correctly answered terms in this individual game.
    '''
    time.sleep(1)
    os.system('clear')
    ans = get_ans(answered, EOSDICT)
    # print(f'answer = {ans}')  #why did fstrings stop working?
    defs = get_anspad(ans)
    defs = shuffle(defs, ans)
    respond = ask_q(ans, defs, user)
    if verify(ans, respond):
        answered.append(ans)
        correct += 1
        user.memory[ans].update_correct()
    return answered


def get_ans(answered, EOSDICT):
    '''
    DOCSTRING: This function takes in a list answered and a dictionaey
    EOSDICT. It selects a random entry from the dictionary and compares
    against the previous answers in the answered list.
    Input:
        list: answered to ensure no repeats
        dict: deck name, currently hard coded to EOSDICT
    Output:
        string: answer
    '''
    answer = ""
    while True:
        # answer = pick random entry
        # answer = random.choice(list(EOSDICT.keys()))
        answer = random.choice(ANS_LIST)  # remove after debugging
        # compare answer against previous game answer
        if answer not in answered:
            break
    return answer


def get_anspad(answer):
    '''
    DOCSTRING: This function takes in the answer generated by get_ans(),
    pulls 3 additional definitions from EOSDICT, and compares them to
    confirm there are no duplicates.
    Returns a list "anspad" to be shuffled and printed
    Input:
        string: answered
    Output:
        list: anspad --> the 3 incorrect answers
    '''
    # pick 3 additional defs that aren't answer
    anspad = []
    while len(anspad) < 3:
        tmpans = dicts.EOSDICT[answer]
        while tmpans == dicts.EOSDICT[answer]:
            tmpans = random.choice(list(dicts.EOSDICT.values()))
        if tmpans not in anspad:
            anspad.append(tmpans)
    return anspad


def shuffle(anspad, answer):
    '''
    DOCSTRING: This function takes in the list of defintions generated by
    get_anspad, shuffles them, and returns new list.
    Input:
        list of strings: anspad
        string: answer
    '''
    anspad.append(dicts.EOSDICT[answer])
    random.shuffle(anspad)
    return anspad


def ask_q(answer, anspad, user):
    '''
    DOCSTRING: This function takes in the answer and definitions, prints
    them, queries the user, and returns their the string definition
    the user chose.
    Input:
        string: answer
        list of strings: andpad
        User: user
    Output:
        string: anspad[response]
    '''
    start_time = time.time()
    # print(f"What is the definition of {answer}?\n")
    print("What is the definition of {}?\n".format(answer))
    print("1) {}\n2) {}\n3) {}\n4) {}\n\n".format(
        anspad[0], anspad[1], anspad[2], anspad[3]))
#        f"1) {anspad[0]}\n2) {anspad[1]}\n3) {anspad[2]}\n4) {anspad[3]}\n\n")
    print("Answer: ")
    # add input verification
    response = mu.valifate_response(anspad)
    end_time = time.time()
    user.memory[answer].update_time(start_time, end_time)
    return anspad[response]


def verify(answer, response):
    '''
    DOCSTRING: This function takes in the generated answer and the
    user's response, compares them, and prints the result. Returns
    True if correct, False if incorrect.
    Input:
        string: answer, response
    Output:
        boolean
    '''
    result = dicts.EOSDICT[answer] == response
    if result:
        print("\n\n     Congrats! Nailed it!\n\n")
        return True
    else:
        print("\n\n     Sorry, incorrect.\n\n")
        return False

# fix non-looping issue for multiple game(in main?)


def play_again(user):
    '''
    DOCSTRING: This function asks the user if they want to play again
    if yes, restart memory, if no then exit.
    Input:
        User: user
    Output:
        No output, but can restart the game
    '''
    print("{},\n\tWould you like to play again?".format(user.name))
    print("Enter 'y' or 'n'")
    if input('>')[0].lower() != 'n':
        memory(user)
